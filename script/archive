#!/bin/sh
set -o errexit -o nounset

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
ARCHIVE_DIR="./archive"

build_release_target() {
    echo "Building target for release..."

    set -x

    # Sandbox must be disabled for Homebrew builds. See
    # https://github.com/yonaskolb/XcodeGen/issues/51#issuecomment-331615462
    swift build -c release -Xswiftc -Osize ${DISABLE_SANDBOX:+--disable-sandbox}

    mkdir -p "$ARCHIVE_DIR"
    cp .build/release/zero "$ARCHIVE_DIR"
    strip "$ARCHIVE_DIR/zero"
    set +x

    echo "Successfully built target."
}

generate_completions() {
    echo "Generating completions..."
    mkdir -p "$ARCHIVE_DIR/complete"
    OUT_DIR="$ARCHIVE_DIR/complete" swift run generate-completions
}

package() (
    echo "Preparing new package..."

    version="$("$ARCHIVE_DIR"/zero --version | sed 's/^Version: //')"
    package_name="zero-$version"
    package_dir="$ARCHIVE_DIR/$package_name"

    mkdir -p "$package_dir"
    cp "archive/zero" "$package_dir/"
    cp CHANGELOG.md README.md LICENSE "$package_dir/"
    cp -R "$ARCHIVE_DIR/complete" "$package_dir/"

    cd "$ARCHIVE_DIR"
    tar czvf "./$package_name.tar.gz" --options compression-level=9 "$package_name"

    sha="$(shasum -a 256 "./$package_name.tar.gz" | sed 's/ .*//')"
    echo "Package SHA: $sha"
)

main() (
    cd "$SCRIPT_DIR/.."
    build_release_target
    generate_completions

    if [ "${1:-}" = "--package" ]; then
        package
    fi
)

main "$@"
