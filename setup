#!/usr/bin/env bash
#
# Radically simple zero-file configuration management for macOS.
# https://github.com/zero-sh/zero.sh

set -o errexit -o nounset
shopt -s dotglob

SCRIPT_PATH="$(cd "$(dirname "$0")" && pwd)"
CONFIG_PATH="$(cd "$SCRIPT_PATH/.." && pwd)"
readonly SCRIPT_PATH CONFIG_PATH

# shellcheck source=/dev/null
source "$SCRIPT_PATH/lib/termui.sh"

show_version() {
    local -r version="0.0.0"
    (
        cd "$SCRIPT_PATH"
        if [ -d "./.git" ]; then
            echo "zero.sh $version $(git rev-parse --short HEAD)"
        else
            echo "zero.sh $version"
        fi
    )
}

show_usage() {
    cat <<USAGE
Usage: setup [<workspace>]

Setup the given workspace, or the outer directory if none is given. This is
expected to exist as the parent directory of this script.
USAGE
}

# A nice way to handle simple flags.
-h() {
    show_version
    show_usage
}
--help() {
    show_version
    show_usage
}
-v() { show_version; }
--version() { show_version; }

main() {
    validate_params "$@"

    local -a workspaces
    IFS='.' read -ra workspaces <<<"${1:-}"
    validate_workspaces "${workspaces[@]:-}"

    check_reachability
    system_update
    xcode_tools_install
    brew_update_install
    app_store_update
    bootstrap_workspaces "${workspaces[@]:-}"
}

validate_params() {
    if [ "$#" -gt 1 ]; then
        puterr "Invalid number of arguments."
        exit 1
    fi

    if [[ ${1:-} == *".."* ]] || [[ ${1:-} == *"/"* ]]; then
        puterr "Invalid workspace format."
        exit 1
    fi
}

validate_workspaces() {
    local -a -r workspace_dirs=("$@")
    if [ -z "${workspace_dirs[0]}" ]; then
        if [ -d "$CONFIG_PATH/workspaces" ]; then
            puterr "Missing required parameter 'workspace'."
            show_usage
            exit 1
        fi

        return
    fi

    (
        cd "$CONFIG_PATH"
        local idx=0
        local last_idx
        last_idx=$((${#workspace_dirs[@]} - 1))
        for dir in "${workspace_dirs[@]}"; do
            local -r workspace_dir="./workspaces/$dir"
            if [ ! "$dir" = "." ] && [ ! -d "$workspace_dir" ]; then
                puterr "The directory '$(relpath "$workspace_dir" "$CONFIG_PATH")' does not exist in '$CONFIG_PATH'."
                exit 1
            fi

            cd "$workspace_dir"
            if [ "$idx" -eq "$last_idx" ] && [ -d ./workspaces ]; then
                puterr "Cannot bootstrap parent of a workspace."
                exit 1
            fi
            ((idx += 1))
        done
    )
}

check_reachability() {
    if ! curl www.apple.com; then
        puterr "You are not connected to the Internet. Please connect to continue."
        exit 1
    fi
}

system_update() {
    putprogress "Checking for system updates..."
    print_run_cmd softwareupdate --list
}

xcode_tools_install() {
    if ! has_dev_tools; then
        putprogress "Installing the Xcode Command Line Tools."
        print_run_cmd xcode-select --install
        tty::pause "Tap any key when the installation is complete. " >/dev/null
        echo
        if ! has_dev_tools; then
            puterr "Aborted Xcode Command Line Tools installation."
            exit 1
        fi
    fi
}

brew_update_install() {
    if command -v brew >/dev/null; then
        print_run_cmd brew update
        print_run_cmd brew upgrade
        print_run_cmd brew cask upgrade
    else
        putprogress "Installing Homebrew..."
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
}

app_store_update() {
    putprogress "Upgrading apps from the App Store..."
    if ! command -v mas >/dev/null; then
        print_run_cmd brew install mas
    fi

    print_run_cmd mas upgrade
}

run_scripts() {
    local -r dir="./run/$1"

    (
        putprogress "Running scripts in run/$1..."
        if [ ! -e "$dir" ] || [ -z "$(ls -A "$dir")" ]; then
            echo "No scripts found."
        elif [ ! -d "$dir" ]; then
            puterr "Not a directory: $dir"
            exit 1
        else
            cd "$dir"
            for script in *; do
                print_run_cmd "./$script"
            done
        fi
    )
}

apply_symlinks() {
    if [ ! -d "./symlinks" ]; then
        return
    fi

    putprogress "Applying symlinks..."

    (
        cd "./symlinks"
        shopt -s nullglob
        for symlink_dir in */; do
            addlink "$symlink_dir"
        done
        shopt -u nullglob
    )

    puts "Applied symlinks."
}

apply_defaults() {
    if [ ! -f "./defaults.yml" ]; then
        return
    fi

    putprogress "Applying defaults..."

    if ! command -v apply-user-defaults >/dev/null; then
        print_run_cmd brew install zero-sh/tap/apply-user-defaults
    fi

    # Close any open System Preferences panes, to prevent them from overriding
    # settings weâ€™re about to change.
    print_run_cmd osascript -e 'quit app "System Preferences"'

    apply-user-defaults ./defaults.yaml
}

bootstrap_workspaces() {
    # Steps to setup a workspace:
    #
    # 1. Validate input for entire directory structure before starting (this is
    #    done at the beginning of the script).
    #
    # 2. cd "$CONFIG_PATH"
    #
    # 3. If $workspace is an empty string, bootstrap.
    #
    # 4. Else, for each directory in $workspace.split("."):
    #
    #    If directory is a workspace container (i.e. it contains a
    #    "./workspaces" directory):
    #
    #    - Change to "./workspaces" directory.
    #    - Run brew bundle in "./shared" if it exists.
    #    - Change to the directory relative to the current path.
    #
    #    Otherwise, iff directory is the last entry in the list, run brew bundle
    #    in the directory.
    #
    # 5. Do step (4) again, for run scripts, defaults & symlinks.

    local -a -r workspaces=("${@:-.}")
    workspaces_run_cmd workspaces[@] brew_bundle
    workspaces_run_cmd workspaces[@] bootstrap_after
}

abspath() {
    python -c "import os, sys; print(os.path.abspath(sys.argv[1]))" "$1"
}

relpath() {
    python -c 'import os, sys; print(os.path.relpath(*sys.argv[1:]))' "$@"
}

addlink() {
    if ! command -v stow >/dev/null; then
        print_run_cmd brew install stow
    fi

    print_run_cmd stow "$1" --target="$HOME" --dotfiles --verbose=1
}

has_dev_tools() {
    local developer_dir
    developer_dir="$(xcode-select --print-path)"
    if [ -d "$developer_dir" ] && [ -x "$developer_dir/usr/bin/git" ]; then
        return 0
    else
        return 1
    fi
}

workspaces_run_cmd() {
    local -a -r workspace_dirs=("${!1}")
    local -r cmd="$2"
    (
        cd "$CONFIG_PATH"
        for dir in "${workspace_dirs[@]}"; do
            if [ -d "./workspaces" ]; then
                cd "./workspaces"

                if [ -d ./shared ]; then
                    $cmd ./shared
                fi

                cd "./$dir"
            else
                # Always last entry due to prior validation.
                $cmd .
            fi
        done
    )
}

bootstrap_after() {
    local -r dir="$1"
    (
        cd "$dir"
        if [ ! "$(abspath ".")" = "$CONFIG_PATH" ]; then
            putbold "Finalizing setup for $(relpath "." "$CONFIG_PATH")."
        fi

        run_scripts before
        apply_defaults
        apply_symlinks
        run_scripts after
    )
}

brew_bundle() {
    local -r dir="$1"
    (
        if [ ! "$(abspath ".")" = "$CONFIG_PATH" ]; then
            putbold "Running brew bundle for $(relpath "." "$CONFIG_PATH")."
        fi

        if [ ! -f ./Brewfile ]; then
            echo "No Brewfile found."
        else
            print_run_cmd brew bundle --no-lock
        fi
    )
}

# Delegate to subcommands or run main, as appropriate.
if declare -f -- "${1:-}" >/dev/null; then
    "$@"
else
    main "$@"
fi
